// Generated by CoffeeScript 1.10.0
(function() {
  var FileBase, MAX_APPENDS, fs, path;

  MAX_APPENDS = 10000;

  fs = require('fs');

  path = require('path');

  FileBase = (function() {
    function FileBase(filePath, encoding) {
      this.path = filePath;
      this.buffer = [];
      this.encoding = encoding;
      if (this.encoding == null) {
        this.encoding = "utf8";
      }
      this.stopped = true;
      this.synced = true;
      this.closed = false;
      this.fd = null;
      this.fdDir = null;
      this.pos = null;
    }

    FileBase.prototype.append = function(str) {
      if (this.stopped === true) {
        return false;
      }
      this.synced = false;
      this.buffer.push(str);
      if (this.buffer.length > MAX_APPENDS) {
        this._flush();
      }
      return true;
    };

    FileBase.prototype._createFile = function() {
      var parentPath, stat;
      if (this.fd == null) {
        this.fd = fs.openSync(this.path, 'a');
        stat = fs.statSync(this.path);
        this.pos = stat.size;
        parentPath = path.resolve(this.path, '..');
        try {
          this.fdDir = fs.openSync(parentPath, 'r');
        } catch (undefined) {}
      }
    };

    FileBase.prototype._flush = function() {
      var str;
      if (this.buffer.length === 0) {
        return;
      }
      this._createFile();
      str = this.buffer.join('');
      this.pos += fs.writeSync(this.fd, str, this.pos, this.encoding);
      this.buffer = [];
    };

    FileBase.prototype.fsync = function() {
      if (this.synced === true) {
        return false;
      }
      this._flush();
      if (this.fd != null) {
        fs.fsyncSync(this.fd);
        if (this.fdDir != null) {
          try {
            fs.fsyncSync(this.fdDir);
          } catch (undefined) {}
        }
      }
      this.synced = true;
      return true;
    };

    FileBase.prototype.changePath = function(filePath, encoding) {
      this.fsync();
      if (this.fd != null) {
        fs.close(this.fd);
        if (this.fdDir) {
          fs.close(this.fdDir);
        }
      }
      this.fd = null;
      this.fdDir = null;
      this.pos = null;
      this.path = filePath;
      if (encoding != null) {
        this.encoding = encoding;
      }
    };

    FileBase.prototype.close = function() {
      this.fsync();
      if (this.fd != null) {
        fs.close(this.fd);
        if (this.fdDir != null) {
          fs.close(this.fdDir);
        }
      }
      this.closed = true;
    };

    return FileBase;

  })();

  module.exports = FileBase;

}).call(this);
