// Generated by CoffeeScript 1.10.0
(function() {
  var BUFFER_SIZE, FileBase, fs, path;

  BUFFER_SIZE = 1 << 17;

  fs = require('fs');

  path = require('path');

  FileBase = (function() {
    function FileBase(filePath, encoding) {
      this.path = filePath;
      this.buffer = new Buffer(BUFFER_SIZE);
      this.bufferLen = 0;
      this.encoding = encoding;
      if (this.encoding == null) {
        this.encoding = "utf8";
      }
      this.stopped = true;
      this.synced = true;
      this.closed = false;
      this.fd = null;
      this.fdDir = null;
      this.pos = null;
    }

    FileBase.prototype.append = function(str) {
      var bytes, chunks, len, length, remain, start;
      if (this.stopped === true) {
        return false;
      }
      this.synced = false;
      remain = BUFFER_SIZE - this.bufferLen;
      if (str.length * 2 < remain) {
        len = this.buffer.write(str, this.bufferLen, remain, this.encoding);
        if (len < remain) {
          this.bufferLen += len;
          return true;
        }
      }
      bytes = new Buffer(str, this.encoding);
      len = Math.min(remain, bytes.length);
      this.bufferLen += bytes.copy(this.buffer, this.bufferLen, 0, len);
      if (bytes.length >= remain) {
        this._flush();
        start = remain;
        len = bytes.length - remain;
        chunks = Math.floor(len / BUFFER_SIZE);
        if (chunks > 0) {
          length = BUFFER_SIZE * chunks;
          this.pos += fs.writeSync(this.fd, bytes, start, length, this.pos);
          start += length;
        }
        this.bufferLen = bytes.copy(this.buffer, 0, start, bytes.length);
      }
      return true;
    };

    FileBase.prototype._createFile = function() {
      var parentPath, stat;
      if (this.fd == null) {
        this.fd = fs.openSync(this.path, 'a');
        stat = fs.statSync(this.path);
        this.pos = stat.size;
        parentPath = path.resolve(this.path, '..');
        try {
          this.fdDir = fs.openSync(parentPath, 'r');
        } catch (undefined) {}
      }
    };

    FileBase.prototype._flush = function() {
      if (this.bufferLen === 0) {
        return;
      }
      this._createFile();
      this.pos += fs.writeSync(this.fd, this.buffer, 0, this.bufferLen, this.pos);
      this.bufferLen = 0;
    };

    FileBase.prototype.fsync = function() {
      if (this.synced === true) {
        return false;
      }
      this._flush();
      if (this.fd != null) {
        fs.fsyncSync(this.fd);
        if (this.fdDir != null) {
          try {
            fs.fsyncSync(this.fdDir);
          } catch (undefined) {}
        }
      }
      this.synced = true;
      return true;
    };

    FileBase.prototype.changePath = function(filePath, encoding) {
      this.fsync();
      if (this.fd != null) {
        fs.close(this.fd);
        if (this.fdDir) {
          fs.close(this.fdDir);
        }
      }
      this.fd = null;
      this.fdDir = null;
      this.pos = null;
      this.path = filePath;
      if (encoding != null) {
        this.encoding = encoding;
      }
    };

    FileBase.prototype.close = function() {
      this.fsync();
      if (this.fd != null) {
        fs.close(this.fd);
        if (this.fdDir != null) {
          fs.close(this.fdDir);
        }
      }
      this.closed = true;
    };

    return FileBase;

  })();

  module.exports = FileBase;

}).call(this);
